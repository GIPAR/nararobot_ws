# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs/Proxemic.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Proxemic(genpy.Message):
  _md5sum = "68ac8bece4ff23821fe260913c03d51e"
  _type = "msgs/Proxemic"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# shift of the center of the proxemics (shift of Gauss)
geometry_msgs/Point centerShift
# spread of 
geometry_msgs/Point spread
# rotation of proxemics (rotation of Gauss)
float64 rotation
# min cost to get in costmaps
int64 freeBorder
# max cost that does not count as lethal obstacle
int64 lethalBorder

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['centerShift','spread','rotation','freeBorder','lethalBorder']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','float64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       centerShift,spread,rotation,freeBorder,lethalBorder

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Proxemic, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.centerShift is None:
        self.centerShift = geometry_msgs.msg.Point()
      if self.spread is None:
        self.spread = geometry_msgs.msg.Point()
      if self.rotation is None:
        self.rotation = 0.
      if self.freeBorder is None:
        self.freeBorder = 0
      if self.lethalBorder is None:
        self.lethalBorder = 0
    else:
      self.centerShift = geometry_msgs.msg.Point()
      self.spread = geometry_msgs.msg.Point()
      self.rotation = 0.
      self.freeBorder = 0
      self.lethalBorder = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d2q().pack(_x.centerShift.x, _x.centerShift.y, _x.centerShift.z, _x.spread.x, _x.spread.y, _x.spread.z, _x.rotation, _x.freeBorder, _x.lethalBorder))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.centerShift is None:
        self.centerShift = geometry_msgs.msg.Point()
      if self.spread is None:
        self.spread = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.centerShift.x, _x.centerShift.y, _x.centerShift.z, _x.spread.x, _x.spread.y, _x.spread.z, _x.rotation, _x.freeBorder, _x.lethalBorder,) = _get_struct_7d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d2q().pack(_x.centerShift.x, _x.centerShift.y, _x.centerShift.z, _x.spread.x, _x.spread.y, _x.spread.z, _x.rotation, _x.freeBorder, _x.lethalBorder))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.centerShift is None:
        self.centerShift = geometry_msgs.msg.Point()
      if self.spread is None:
        self.spread = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.centerShift.x, _x.centerShift.y, _x.centerShift.z, _x.spread.x, _x.spread.y, _x.spread.z, _x.rotation, _x.freeBorder, _x.lethalBorder,) = _get_struct_7d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d2q = None
def _get_struct_7d2q():
    global _struct_7d2q
    if _struct_7d2q is None:
        _struct_7d2q = struct.Struct("<7d2q")
    return _struct_7d2q
