// Generated by gencpp from file msgs/Proxemic.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_PROXEMIC_H
#define MSGS_MESSAGE_PROXEMIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace msgs
{
template <class ContainerAllocator>
struct Proxemic_
{
  typedef Proxemic_<ContainerAllocator> Type;

  Proxemic_()
    : centerShift()
    , spread()
    , rotation(0.0)
    , freeBorder(0)
    , lethalBorder(0)  {
    }
  Proxemic_(const ContainerAllocator& _alloc)
    : centerShift(_alloc)
    , spread(_alloc)
    , rotation(0.0)
    , freeBorder(0)
    , lethalBorder(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _centerShift_type;
  _centerShift_type centerShift;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _spread_type;
  _spread_type spread;

   typedef double _rotation_type;
  _rotation_type rotation;

   typedef int64_t _freeBorder_type;
  _freeBorder_type freeBorder;

   typedef int64_t _lethalBorder_type;
  _lethalBorder_type lethalBorder;





  typedef boost::shared_ptr< ::msgs::Proxemic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::Proxemic_<ContainerAllocator> const> ConstPtr;

}; // struct Proxemic_

typedef ::msgs::Proxemic_<std::allocator<void> > Proxemic;

typedef boost::shared_ptr< ::msgs::Proxemic > ProxemicPtr;
typedef boost::shared_ptr< ::msgs::Proxemic const> ProxemicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::Proxemic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::Proxemic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::Proxemic_<ContainerAllocator1> & lhs, const ::msgs::Proxemic_<ContainerAllocator2> & rhs)
{
  return lhs.centerShift == rhs.centerShift &&
    lhs.spread == rhs.spread &&
    lhs.rotation == rhs.rotation &&
    lhs.freeBorder == rhs.freeBorder &&
    lhs.lethalBorder == rhs.lethalBorder;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::Proxemic_<ContainerAllocator1> & lhs, const ::msgs::Proxemic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::Proxemic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::Proxemic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::Proxemic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::Proxemic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::Proxemic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::Proxemic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::Proxemic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68ac8bece4ff23821fe260913c03d51e";
  }

  static const char* value(const ::msgs::Proxemic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68ac8bece4ff2382ULL;
  static const uint64_t static_value2 = 0x1fe260913c03d51eULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::Proxemic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/Proxemic";
  }

  static const char* value(const ::msgs::Proxemic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::Proxemic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# shift of the center of the proxemics (shift of Gauss)\n"
"geometry_msgs/Point centerShift\n"
"# spread of \n"
"geometry_msgs/Point spread\n"
"# rotation of proxemics (rotation of Gauss)\n"
"float64 rotation\n"
"# min cost to get in costmaps\n"
"int64 freeBorder\n"
"# max cost that does not count as lethal obstacle\n"
"int64 lethalBorder\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msgs::Proxemic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::Proxemic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centerShift);
      stream.next(m.spread);
      stream.next(m.rotation);
      stream.next(m.freeBorder);
      stream.next(m.lethalBorder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Proxemic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::Proxemic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::Proxemic_<ContainerAllocator>& v)
  {
    s << indent << "centerShift: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.centerShift);
    s << indent << "spread: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.spread);
    s << indent << "rotation: ";
    Printer<double>::stream(s, indent + "  ", v.rotation);
    s << indent << "freeBorder: ";
    Printer<int64_t>::stream(s, indent + "  ", v.freeBorder);
    s << indent << "lethalBorder: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lethalBorder);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_PROXEMIC_H
